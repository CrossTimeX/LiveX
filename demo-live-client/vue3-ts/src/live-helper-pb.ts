// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: src/proto/live-helper-pb.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export enum MessageType {
  /** MESSAGE_UNKNOWN_TYPE - 无效 */
  MESSAGE_UNKNOWN_TYPE = 0,
  /** MESSAGE_ROOM_REQ - c->s 请求直播间信息 payload = Req */
  MESSAGE_ROOM_REQ = 1,
  /** MESSAGE_ROOMS - s->c 直播间信息 payload = RoomLives */
  MESSAGE_ROOMS = 2,
  /** MESSAGE_GIFT_REQ - 发送时机：1 客户端请求时 2 有新的直播间信息时 */
  MESSAGE_GIFT_REQ = 3,
  /** MESSAGE_GIFTS - s->c 礼物信息 payload = Gifts */
  MESSAGE_GIFTS = 4,
  /** MESSAGE_USERACTIONS - 发送时机：1 客户端请求时 2 有新的礼物信息时 */
  MESSAGE_USERACTIONS = 5,
  UNRECOGNIZED = -1,
}

export function messageTypeFromJSON(object: any): MessageType {
  switch (object) {
    case 0:
    case "MESSAGE_UNKNOWN_TYPE":
      return MessageType.MESSAGE_UNKNOWN_TYPE;
    case 1:
    case "MESSAGE_ROOM_REQ":
      return MessageType.MESSAGE_ROOM_REQ;
    case 2:
    case "MESSAGE_ROOMS":
      return MessageType.MESSAGE_ROOMS;
    case 3:
    case "MESSAGE_GIFT_REQ":
      return MessageType.MESSAGE_GIFT_REQ;
    case 4:
    case "MESSAGE_GIFTS":
      return MessageType.MESSAGE_GIFTS;
    case 5:
    case "MESSAGE_USERACTIONS":
      return MessageType.MESSAGE_USERACTIONS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageType.UNRECOGNIZED;
  }
}

export function messageTypeToJSON(object: MessageType): string {
  switch (object) {
    case MessageType.MESSAGE_UNKNOWN_TYPE:
      return "MESSAGE_UNKNOWN_TYPE";
    case MessageType.MESSAGE_ROOM_REQ:
      return "MESSAGE_ROOM_REQ";
    case MessageType.MESSAGE_ROOMS:
      return "MESSAGE_ROOMS";
    case MessageType.MESSAGE_GIFT_REQ:
      return "MESSAGE_GIFT_REQ";
    case MessageType.MESSAGE_GIFTS:
      return "MESSAGE_GIFTS";
    case MessageType.MESSAGE_USERACTIONS:
      return "MESSAGE_USERACTIONS";
    case MessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 用户动作类别 */
export enum UserActionType {
  /** USERACTION_UNKNOWN_TYPE - 无效 */
  USERACTION_UNKNOWN_TYPE = 0,
  /** USERACTION_MEMBER - 来了 */
  USERACTION_MEMBER = 1,
  /** USERACTION_CHAT - 聊天 */
  USERACTION_CHAT = 2,
  /** USERACTION_GIFT - 礼物 */
  USERACTION_GIFT = 3,
  /** USERACTION_LIKE - 点赞 */
  USERACTION_LIKE = 4,
  /** USERACTION_SOCIAL - 关注、取消关注、分享 */
  USERACTION_SOCIAL = 5,
  UNRECOGNIZED = -1,
}

export function userActionTypeFromJSON(object: any): UserActionType {
  switch (object) {
    case 0:
    case "USERACTION_UNKNOWN_TYPE":
      return UserActionType.USERACTION_UNKNOWN_TYPE;
    case 1:
    case "USERACTION_MEMBER":
      return UserActionType.USERACTION_MEMBER;
    case 2:
    case "USERACTION_CHAT":
      return UserActionType.USERACTION_CHAT;
    case 3:
    case "USERACTION_GIFT":
      return UserActionType.USERACTION_GIFT;
    case 4:
    case "USERACTION_LIKE":
      return UserActionType.USERACTION_LIKE;
    case 5:
    case "USERACTION_SOCIAL":
      return UserActionType.USERACTION_SOCIAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserActionType.UNRECOGNIZED;
  }
}

export function userActionTypeToJSON(object: UserActionType): string {
  switch (object) {
    case UserActionType.USERACTION_UNKNOWN_TYPE:
      return "USERACTION_UNKNOWN_TYPE";
    case UserActionType.USERACTION_MEMBER:
      return "USERACTION_MEMBER";
    case UserActionType.USERACTION_CHAT:
      return "USERACTION_CHAT";
    case UserActionType.USERACTION_GIFT:
      return "USERACTION_GIFT";
    case UserActionType.USERACTION_LIKE:
      return "USERACTION_LIKE";
    case UserActionType.USERACTION_SOCIAL:
      return "USERACTION_SOCIAL";
    case UserActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 消息包装 */
export interface MessageWrapper {
  /** 消息类型 */
  type: MessageType;
  /** 二进制序列化数据 xxx.serializeBinary() */
  payload: Uint8Array;
}

/** 请求数据 */
export interface Req {
  /** 请求目标数据的ID 空字符串 '' 代表请求所有 */
  id: string;
}

/** 礼物信息 */
export interface Gift {
  /** ID */
  id: string;
  /** 名称 */
  name: string;
  /** 单价 */
  diamond: number;
  /** 图片url */
  image: string;
}

/** 礼物信息（多个） */
export interface Gifts {
  gifts: Gift[];
}

/** 主播/房间所有者 信息 */
export interface Anchor {
  /** 个人ID */
  idStr: string;
  /** 个人主页网址ID https://www.douyin.com/user/{sec_uid} */
  secUid: string;
  /** 昵称 */
  nickname: string;
  /** 头像URL */
  avatarThumb: string;
}

/** 房间的一些设置 */
export interface RoomAuth {
  /** 用户信息是否公开 false-匿名 用户id='111111' 昵称带*号 */
  UserCard: boolean;
}

/** 房间信息 */
export interface Room {
  /** 房间ID = RoomLive.id */
  idStr: string;
  /** 2-直播中 */
  status: number;
  /** 房间标题 */
  title: string;
  /** 封面URL */
  cover: string;
  /** 房间所有者信息 多数情况与 RoomLive.anchor 相同 */
  owner:
    | Anchor
    | undefined;
  /** 管理员用户ID列表 */
  adminUserIds: string[];
  /** 房间设置 */
  roomAuth:
    | RoomAuth
    | undefined;
  /** 在线人数 */
  onlineCount: number;
  /** 点赞总数 */
  likeCount: number;
  /** 关注总数 */
  followCount: number;
  /** 分享总数 */
  shareTotalCount: number;
}

/** 直播间信息 */
export interface RoomLive {
  /** 直播间ID */
  id: string;
  /** 直播间地址ID https://live.douyin.com/{web_rid} */
  webRid: string;
  /** 二维码URL */
  qrcodeUrl: string;
  /** 主播信息 */
  anchor:
    | Anchor
    | undefined;
  /** 房间信息 */
  room: Room | undefined;
}

/** 直播间信息（多个） */
export interface RoomLives {
  roomLives: RoomLive[];
}

/** 消费等级 */
export interface PayGrade {
  /** 等级 */
  level: number;
}

/** 粉丝俱乐部 */
export interface FansClub {
  /** 主播ID */
  anchorId: string;
  /** 等级 */
  level: number;
  /** 未知 0-? 1-? 2-? */
  userFansClubStatus: number;
}

/** 用户信息 */
export interface User {
  /** 个人ID */
  id: string;
  /** 个人主页网址ID https://www.douyin.com/user/{sec_uid} */
  secUid: string;
  /** 抖音号 */
  displayId: string;
  /** 昵称 */
  nickname: string;
  /** 头像URL */
  avatarThumb: string;
  /** ?等级 */
  level: number;
  /** 0-未知 1-男 2-女 */
  gender: number;
  /** 消费等级 */
  payGrade:
    | PayGrade
    | undefined;
  /** 未知功能 当直播间设置观众匿名时 id都是111111 昵称带*号 只有这个字段有意义 */
  webcastUid: string;
  /** 粉丝俱乐部 */
  fansClub: FansClub | undefined;
}

/** 用户动作信息 */
export interface UserAction {
  /** 直播间ID */
  roomInfoId: string;
  /** 用户信息 */
  user:
    | User
    | undefined;
  /** 时间戳(ms) */
  timestamp: number;
  /** 动作类型 */
  type: UserActionType;
  /**
   * 字符串参数
   * type == CHAT: 聊天内容
   * type == GIFT: 赠送礼物ID
   */
  paramStr: string;
  /**
   * 数字参数
   * type == GIFT: 本次赠送礼物数量
   * type == LIKE: 本次点赞数量
   * type == SOCIAL: 1-关注 2-取消关注 3-分享
   */
  paramInt: number;
}

/** 用户动作信息（多个） */
export interface UserActions {
  userActions: UserAction[];
}

function createBaseMessageWrapper(): MessageWrapper {
  return { type: 0, payload: new Uint8Array(0) };
}

export const MessageWrapper: MessageFns<MessageWrapper> = {
  encode(message: MessageWrapper, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageWrapper {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageWrapper {
    return {
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: MessageWrapper): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageWrapper>, I>>(base?: I): MessageWrapper {
    return MessageWrapper.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageWrapper>, I>>(object: I): MessageWrapper {
    const message = createBaseMessageWrapper();
    message.type = object.type ?? 0;
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseReq(): Req {
  return { id: "" };
}

export const Req: MessageFns<Req> = {
  encode(message: Req, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Req {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Req {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Req): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Req>, I>>(base?: I): Req {
    return Req.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Req>, I>>(object: I): Req {
    const message = createBaseReq();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGift(): Gift {
  return { id: "", name: "", diamond: 0, image: "" };
}

export const Gift: MessageFns<Gift> = {
  encode(message: Gift, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.diamond !== 0) {
      writer.uint32(24).int32(message.diamond);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.diamond = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      diamond: isSet(object.diamond) ? globalThis.Number(object.diamond) : 0,
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: Gift): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.diamond !== 0) {
      obj.diamond = Math.round(message.diamond);
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift>, I>>(base?: I): Gift {
    return Gift.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift>, I>>(object: I): Gift {
    const message = createBaseGift();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.diamond = object.diamond ?? 0;
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseGifts(): Gifts {
  return { gifts: [] };
}

export const Gifts: MessageFns<Gifts> = {
  encode(message: Gifts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gifts) {
      Gift.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gifts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGifts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gifts.push(Gift.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gifts {
    return { gifts: globalThis.Array.isArray(object?.gifts) ? object.gifts.map((e: any) => Gift.fromJSON(e)) : [] };
  },

  toJSON(message: Gifts): unknown {
    const obj: any = {};
    if (message.gifts?.length) {
      obj.gifts = message.gifts.map((e) => Gift.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gifts>, I>>(base?: I): Gifts {
    return Gifts.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gifts>, I>>(object: I): Gifts {
    const message = createBaseGifts();
    message.gifts = object.gifts?.map((e) => Gift.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAnchor(): Anchor {
  return { idStr: "", secUid: "", nickname: "", avatarThumb: "" };
}

export const Anchor: MessageFns<Anchor> = {
  encode(message: Anchor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idStr !== "") {
      writer.uint32(10).string(message.idStr);
    }
    if (message.secUid !== "") {
      writer.uint32(18).string(message.secUid);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.avatarThumb !== "") {
      writer.uint32(34).string(message.avatarThumb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Anchor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnchor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.idStr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secUid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.avatarThumb = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Anchor {
    return {
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      secUid: isSet(object.secUid) ? globalThis.String(object.secUid) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      avatarThumb: isSet(object.avatarThumb) ? globalThis.String(object.avatarThumb) : "",
    };
  },

  toJSON(message: Anchor): unknown {
    const obj: any = {};
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.secUid !== "") {
      obj.secUid = message.secUid;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.avatarThumb !== "") {
      obj.avatarThumb = message.avatarThumb;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Anchor>, I>>(base?: I): Anchor {
    return Anchor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Anchor>, I>>(object: I): Anchor {
    const message = createBaseAnchor();
    message.idStr = object.idStr ?? "";
    message.secUid = object.secUid ?? "";
    message.nickname = object.nickname ?? "";
    message.avatarThumb = object.avatarThumb ?? "";
    return message;
  },
};

function createBaseRoomAuth(): RoomAuth {
  return { UserCard: false };
}

export const RoomAuth: MessageFns<RoomAuth> = {
  encode(message: RoomAuth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.UserCard !== false) {
      writer.uint32(8).bool(message.UserCard);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomAuth {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomAuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.UserCard = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomAuth {
    return { UserCard: isSet(object.UserCard) ? globalThis.Boolean(object.UserCard) : false };
  },

  toJSON(message: RoomAuth): unknown {
    const obj: any = {};
    if (message.UserCard !== false) {
      obj.UserCard = message.UserCard;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomAuth>, I>>(base?: I): RoomAuth {
    return RoomAuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomAuth>, I>>(object: I): RoomAuth {
    const message = createBaseRoomAuth();
    message.UserCard = object.UserCard ?? false;
    return message;
  },
};

function createBaseRoom(): Room {
  return {
    idStr: "",
    status: 0,
    title: "",
    cover: "",
    owner: undefined,
    adminUserIds: [],
    roomAuth: undefined,
    onlineCount: 0,
    likeCount: 0,
    followCount: 0,
    shareTotalCount: 0,
  };
}

export const Room: MessageFns<Room> = {
  encode(message: Room, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idStr !== "") {
      writer.uint32(10).string(message.idStr);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.cover !== "") {
      writer.uint32(34).string(message.cover);
    }
    if (message.owner !== undefined) {
      Anchor.encode(message.owner, writer.uint32(42).fork()).join();
    }
    for (const v of message.adminUserIds) {
      writer.uint32(50).string(v!);
    }
    if (message.roomAuth !== undefined) {
      RoomAuth.encode(message.roomAuth, writer.uint32(58).fork()).join();
    }
    if (message.onlineCount !== 0) {
      writer.uint32(64).int32(message.onlineCount);
    }
    if (message.likeCount !== 0) {
      writer.uint32(72).int32(message.likeCount);
    }
    if (message.followCount !== 0) {
      writer.uint32(80).int32(message.followCount);
    }
    if (message.shareTotalCount !== 0) {
      writer.uint32(88).int32(message.shareTotalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Room {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.idStr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cover = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.owner = Anchor.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.adminUserIds.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.roomAuth = RoomAuth.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.onlineCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.likeCount = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.followCount = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.shareTotalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Room {
    return {
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      cover: isSet(object.cover) ? globalThis.String(object.cover) : "",
      owner: isSet(object.owner) ? Anchor.fromJSON(object.owner) : undefined,
      adminUserIds: globalThis.Array.isArray(object?.adminUserIds)
        ? object.adminUserIds.map((e: any) => globalThis.String(e))
        : [],
      roomAuth: isSet(object.roomAuth) ? RoomAuth.fromJSON(object.roomAuth) : undefined,
      onlineCount: isSet(object.onlineCount) ? globalThis.Number(object.onlineCount) : 0,
      likeCount: isSet(object.likeCount) ? globalThis.Number(object.likeCount) : 0,
      followCount: isSet(object.followCount) ? globalThis.Number(object.followCount) : 0,
      shareTotalCount: isSet(object.shareTotalCount) ? globalThis.Number(object.shareTotalCount) : 0,
    };
  },

  toJSON(message: Room): unknown {
    const obj: any = {};
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.cover !== "") {
      obj.cover = message.cover;
    }
    if (message.owner !== undefined) {
      obj.owner = Anchor.toJSON(message.owner);
    }
    if (message.adminUserIds?.length) {
      obj.adminUserIds = message.adminUserIds;
    }
    if (message.roomAuth !== undefined) {
      obj.roomAuth = RoomAuth.toJSON(message.roomAuth);
    }
    if (message.onlineCount !== 0) {
      obj.onlineCount = Math.round(message.onlineCount);
    }
    if (message.likeCount !== 0) {
      obj.likeCount = Math.round(message.likeCount);
    }
    if (message.followCount !== 0) {
      obj.followCount = Math.round(message.followCount);
    }
    if (message.shareTotalCount !== 0) {
      obj.shareTotalCount = Math.round(message.shareTotalCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Room>, I>>(base?: I): Room {
    return Room.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Room>, I>>(object: I): Room {
    const message = createBaseRoom();
    message.idStr = object.idStr ?? "";
    message.status = object.status ?? 0;
    message.title = object.title ?? "";
    message.cover = object.cover ?? "";
    message.owner = (object.owner !== undefined && object.owner !== null)
      ? Anchor.fromPartial(object.owner)
      : undefined;
    message.adminUserIds = object.adminUserIds?.map((e) => e) || [];
    message.roomAuth = (object.roomAuth !== undefined && object.roomAuth !== null)
      ? RoomAuth.fromPartial(object.roomAuth)
      : undefined;
    message.onlineCount = object.onlineCount ?? 0;
    message.likeCount = object.likeCount ?? 0;
    message.followCount = object.followCount ?? 0;
    message.shareTotalCount = object.shareTotalCount ?? 0;
    return message;
  },
};

function createBaseRoomLive(): RoomLive {
  return { id: "", webRid: "", qrcodeUrl: "", anchor: undefined, room: undefined };
}

export const RoomLive: MessageFns<RoomLive> = {
  encode(message: RoomLive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.webRid !== "") {
      writer.uint32(18).string(message.webRid);
    }
    if (message.qrcodeUrl !== "") {
      writer.uint32(26).string(message.qrcodeUrl);
    }
    if (message.anchor !== undefined) {
      Anchor.encode(message.anchor, writer.uint32(34).fork()).join();
    }
    if (message.room !== undefined) {
      Room.encode(message.room, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomLive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomLive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.webRid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.qrcodeUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.anchor = Anchor.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.room = Room.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomLive {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      webRid: isSet(object.webRid) ? globalThis.String(object.webRid) : "",
      qrcodeUrl: isSet(object.qrcodeUrl) ? globalThis.String(object.qrcodeUrl) : "",
      anchor: isSet(object.anchor) ? Anchor.fromJSON(object.anchor) : undefined,
      room: isSet(object.room) ? Room.fromJSON(object.room) : undefined,
    };
  },

  toJSON(message: RoomLive): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.webRid !== "") {
      obj.webRid = message.webRid;
    }
    if (message.qrcodeUrl !== "") {
      obj.qrcodeUrl = message.qrcodeUrl;
    }
    if (message.anchor !== undefined) {
      obj.anchor = Anchor.toJSON(message.anchor);
    }
    if (message.room !== undefined) {
      obj.room = Room.toJSON(message.room);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomLive>, I>>(base?: I): RoomLive {
    return RoomLive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomLive>, I>>(object: I): RoomLive {
    const message = createBaseRoomLive();
    message.id = object.id ?? "";
    message.webRid = object.webRid ?? "";
    message.qrcodeUrl = object.qrcodeUrl ?? "";
    message.anchor = (object.anchor !== undefined && object.anchor !== null)
      ? Anchor.fromPartial(object.anchor)
      : undefined;
    message.room = (object.room !== undefined && object.room !== null) ? Room.fromPartial(object.room) : undefined;
    return message;
  },
};

function createBaseRoomLives(): RoomLives {
  return { roomLives: [] };
}

export const RoomLives: MessageFns<RoomLives> = {
  encode(message: RoomLives, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.roomLives) {
      RoomLive.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomLives {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomLives();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomLives.push(RoomLive.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomLives {
    return {
      roomLives: globalThis.Array.isArray(object?.roomLives)
        ? object.roomLives.map((e: any) => RoomLive.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RoomLives): unknown {
    const obj: any = {};
    if (message.roomLives?.length) {
      obj.roomLives = message.roomLives.map((e) => RoomLive.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomLives>, I>>(base?: I): RoomLives {
    return RoomLives.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomLives>, I>>(object: I): RoomLives {
    const message = createBaseRoomLives();
    message.roomLives = object.roomLives?.map((e) => RoomLive.fromPartial(e)) || [];
    return message;
  },
};

function createBasePayGrade(): PayGrade {
  return { level: 0 };
}

export const PayGrade: MessageFns<PayGrade> = {
  encode(message: PayGrade, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== 0) {
      writer.uint32(8).int32(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PayGrade {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayGrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PayGrade {
    return { level: isSet(object.level) ? globalThis.Number(object.level) : 0 };
  },

  toJSON(message: PayGrade): unknown {
    const obj: any = {};
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PayGrade>, I>>(base?: I): PayGrade {
    return PayGrade.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PayGrade>, I>>(object: I): PayGrade {
    const message = createBasePayGrade();
    message.level = object.level ?? 0;
    return message;
  },
};

function createBaseFansClub(): FansClub {
  return { anchorId: "", level: 0, userFansClubStatus: 0 };
}

export const FansClub: MessageFns<FansClub> = {
  encode(message: FansClub, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.anchorId !== "") {
      writer.uint32(10).string(message.anchorId);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    if (message.userFansClubStatus !== 0) {
      writer.uint32(24).int32(message.userFansClubStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FansClub {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFansClub();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.anchorId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userFansClubStatus = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FansClub {
    return {
      anchorId: isSet(object.anchorId) ? globalThis.String(object.anchorId) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      userFansClubStatus: isSet(object.userFansClubStatus) ? globalThis.Number(object.userFansClubStatus) : 0,
    };
  },

  toJSON(message: FansClub): unknown {
    const obj: any = {};
    if (message.anchorId !== "") {
      obj.anchorId = message.anchorId;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.userFansClubStatus !== 0) {
      obj.userFansClubStatus = Math.round(message.userFansClubStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FansClub>, I>>(base?: I): FansClub {
    return FansClub.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FansClub>, I>>(object: I): FansClub {
    const message = createBaseFansClub();
    message.anchorId = object.anchorId ?? "";
    message.level = object.level ?? 0;
    message.userFansClubStatus = object.userFansClubStatus ?? 0;
    return message;
  },
};

function createBaseUser(): User {
  return {
    id: "",
    secUid: "",
    displayId: "",
    nickname: "",
    avatarThumb: "",
    level: 0,
    gender: 0,
    payGrade: undefined,
    webcastUid: "",
    fansClub: undefined,
  };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.secUid !== "") {
      writer.uint32(18).string(message.secUid);
    }
    if (message.displayId !== "") {
      writer.uint32(26).string(message.displayId);
    }
    if (message.nickname !== "") {
      writer.uint32(34).string(message.nickname);
    }
    if (message.avatarThumb !== "") {
      writer.uint32(42).string(message.avatarThumb);
    }
    if (message.level !== 0) {
      writer.uint32(48).int32(message.level);
    }
    if (message.gender !== 0) {
      writer.uint32(56).int32(message.gender);
    }
    if (message.payGrade !== undefined) {
      PayGrade.encode(message.payGrade, writer.uint32(66).fork()).join();
    }
    if (message.webcastUid !== "") {
      writer.uint32(74).string(message.webcastUid);
    }
    if (message.fansClub !== undefined) {
      FansClub.encode(message.fansClub, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secUid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avatarThumb = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.gender = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.payGrade = PayGrade.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.webcastUid = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.fansClub = FansClub.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      secUid: isSet(object.secUid) ? globalThis.String(object.secUid) : "",
      displayId: isSet(object.displayId) ? globalThis.String(object.displayId) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      avatarThumb: isSet(object.avatarThumb) ? globalThis.String(object.avatarThumb) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      gender: isSet(object.gender) ? globalThis.Number(object.gender) : 0,
      payGrade: isSet(object.payGrade) ? PayGrade.fromJSON(object.payGrade) : undefined,
      webcastUid: isSet(object.webcastUid) ? globalThis.String(object.webcastUid) : "",
      fansClub: isSet(object.fansClub) ? FansClub.fromJSON(object.fansClub) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.secUid !== "") {
      obj.secUid = message.secUid;
    }
    if (message.displayId !== "") {
      obj.displayId = message.displayId;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.avatarThumb !== "") {
      obj.avatarThumb = message.avatarThumb;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.gender !== 0) {
      obj.gender = Math.round(message.gender);
    }
    if (message.payGrade !== undefined) {
      obj.payGrade = PayGrade.toJSON(message.payGrade);
    }
    if (message.webcastUid !== "") {
      obj.webcastUid = message.webcastUid;
    }
    if (message.fansClub !== undefined) {
      obj.fansClub = FansClub.toJSON(message.fansClub);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.secUid = object.secUid ?? "";
    message.displayId = object.displayId ?? "";
    message.nickname = object.nickname ?? "";
    message.avatarThumb = object.avatarThumb ?? "";
    message.level = object.level ?? 0;
    message.gender = object.gender ?? 0;
    message.payGrade = (object.payGrade !== undefined && object.payGrade !== null)
      ? PayGrade.fromPartial(object.payGrade)
      : undefined;
    message.webcastUid = object.webcastUid ?? "";
    message.fansClub = (object.fansClub !== undefined && object.fansClub !== null)
      ? FansClub.fromPartial(object.fansClub)
      : undefined;
    return message;
  },
};

function createBaseUserAction(): UserAction {
  return { roomInfoId: "", user: undefined, timestamp: 0, type: 0, paramStr: "", paramInt: 0 };
}

export const UserAction: MessageFns<UserAction> = {
  encode(message: UserAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomInfoId !== "") {
      writer.uint32(10).string(message.roomInfoId);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).int64(message.timestamp);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.paramStr !== "") {
      writer.uint32(42).string(message.paramStr);
    }
    if (message.paramInt !== 0) {
      writer.uint32(48).int32(message.paramInt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomInfoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paramStr = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.paramInt = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserAction {
    return {
      roomInfoId: isSet(object.roomInfoId) ? globalThis.String(object.roomInfoId) : "",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      type: isSet(object.type) ? userActionTypeFromJSON(object.type) : 0,
      paramStr: isSet(object.paramStr) ? globalThis.String(object.paramStr) : "",
      paramInt: isSet(object.paramInt) ? globalThis.Number(object.paramInt) : 0,
    };
  },

  toJSON(message: UserAction): unknown {
    const obj: any = {};
    if (message.roomInfoId !== "") {
      obj.roomInfoId = message.roomInfoId;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.type !== 0) {
      obj.type = userActionTypeToJSON(message.type);
    }
    if (message.paramStr !== "") {
      obj.paramStr = message.paramStr;
    }
    if (message.paramInt !== 0) {
      obj.paramInt = Math.round(message.paramInt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserAction>, I>>(base?: I): UserAction {
    return UserAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserAction>, I>>(object: I): UserAction {
    const message = createBaseUserAction();
    message.roomInfoId = object.roomInfoId ?? "";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.timestamp = object.timestamp ?? 0;
    message.type = object.type ?? 0;
    message.paramStr = object.paramStr ?? "";
    message.paramInt = object.paramInt ?? 0;
    return message;
  },
};

function createBaseUserActions(): UserActions {
  return { userActions: [] };
}

export const UserActions: MessageFns<UserActions> = {
  encode(message: UserActions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userActions) {
      UserAction.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserActions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userActions.push(UserAction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserActions {
    return {
      userActions: globalThis.Array.isArray(object?.userActions)
        ? object.userActions.map((e: any) => UserAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UserActions): unknown {
    const obj: any = {};
    if (message.userActions?.length) {
      obj.userActions = message.userActions.map((e) => UserAction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserActions>, I>>(base?: I): UserActions {
    return UserActions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserActions>, I>>(object: I): UserActions {
    const message = createBaseUserActions();
    message.userActions = object.userActions?.map((e) => UserAction.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
